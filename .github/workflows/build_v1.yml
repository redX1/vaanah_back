name: CICD Vaanah-Backend

on:
  push:
    branches:
      - test/perform

jobs:
  benchmark:
    name: Run pytest-benchmark benchmark example
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
      - name: Run benchmark
        run: |
          cd pytest
          pip install -r requirements.txt
          pytest bench.py --benchmark-json output.json
      - name: Store benchmark result
        uses: rhysd/github-action-benchmark@v1
        with:
          name: Python Benchmark with pytest-benchmark
          tool: "pytest"
          gh-pages-branch: test/perform
          benchmark-data-dir-path: pytest/dev/bench
          output-file-path: pytest/output.json
          # Use personal access token instead of GITHUB_TOKEN due to https://github.community/t5/GitHub-Actions/Github-action-not-triggering-gh-pages-upon-push/td-p/26869/highlight/false
          github-token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          auto-push: true
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: "200%"
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: "@rhysd"
  # Test application Image
  # test:
  #   #    needs: build-and-push
  #   name: Vaanah Integration and Unit Test
  #   runs-on: ubuntu-latest
  #   env:
  #     COMPOSE_FILE: docker-compose.yml

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Run tests
  #       run: docker-compose run vaanah-test

  # build-and-deploy:
  #   needs: test
  #   name: Vaanah Build and Deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Check status
  #     - name: Check commit status
  #       id: commit-status
  #       run: |
  #         # Check the status of the Git commit
  #         CURRENT_STATUS=$(curl --url https://api.github.com/vaanah/${{ github.repository }}/commits/${{ github.sha }}/status --header 'authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}' | jq -r '.state');
  #         echo "Current status is: $CURRENT_STATUS"
  #         while [ "${CURRENT_STATUS^^}" = "PENDING" ];
  #           do sleep 10;
  #           CURRENT_STATUS=$(curl --url https://api.github.com/vaanah/${{ github.repository }}/commits/${{ github.sha }}/status --header 'authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}' | jq -r '.state');
  #         done;
  #         echo "Current status is: $CURRENT_STATUS"
  #         if [ "${CURRENT_STATUS^^}" = "FAILURE" ];
  #           then echo "Commit status failed. Canceling execution";
  #           exit 1;
  #         fi
  #     # Checkout Commit
  #     - name: Checkout
  #       uses: actions/checkout@v1

  #     # Cache Memory
  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-
  #     # Login to DockerHub
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     # Docker Build and Push
  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ./
  #         file: ./Dockerfile.django
  #         builder: ${{ steps.buildx.outputs.name }}
  #         push: true
  #         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/vaana-django:v1.5.3
  #         # cache-from: type=local,src=/tmp/.buildx-cache
  #         # cache-to: type=local,dest=/tmp/.buildx-cache

  #     - name: Image digest
  #       run: echo ${{ steps.docker_build.outputs.digest }}

  #     # Deploy to staging with Ansible Playbook
  #     - name: Play Ansible Playbook
  #       uses: arillso/action.playbook@master
  #       with:
  #         playbook: iac/deploy_dev.yml
  #         inventory: iac/hosts
  #         private_key: ${{ secrets.SSH_PRIVATE_KEY }}
  #       #         galaxy_file: tests/requirements.yml
  #       env:
  #         ANSIBLE_HOST_KEY_CHECKING: "false"
  #         ANSIBLE_DEPRECATION_WARNINGS: "false"
